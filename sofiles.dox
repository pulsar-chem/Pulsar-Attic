/////////////////////////
// Developer page      //
// SO Files            //
/////////////////////////
/*! \page developer_so_basics_page Shared Object Files, Plugins, and the Symbol Table




\section developer_symbols The Symbol Table

Each process has a table of associated symbols with it. These symbols
correspond to functions, global variables, etc, available to code
running within the process.  If you ever get an "undefined symbol:
(gibberish)" error, that means the program is requesting something that
has not been loaded into its symbol table. When using C++, the gibberish
is a mangled name.

The symbol table is loaded from a few different places:

  * Aything compiled in (ie, the source files that were compiled into that binary)
  * Static libraries (linked at compile time, also in the binary file)
  * Shared libraries (linked at compile time, loaded at runtime)
  * Modules (NOT linked at compile time, loaded at runtime)

The only real difference between shared libraries and modules is that the existence of
the module is unknown at compile time.


\section developer_so What is a Shared-Object (SO) File

An SO file is just a collection of functions and other data that is accessible from other programs at runtime.

Using a shared library is easy - you just link to it. At runtime, the
required shared library is searched for by the operating system. Where
the operating system tries to find them depends on, among other things,
`LD_LIBRARY_PATH` and system defaults (such as /usr/lib). Rpath is also
used (see \ref developer_symbols_rpath).

Once the operating system finds the SO file, it imports the symbols from
the SO file into the process symbol table. This is done before the `main`
function is called.

As a side note, you can sometimes think of an executable binary file as a
SO file with `main` function defined. The OS opens the binary, searches
for `main`, and runs it (among lots of other stuff). For this reason,
you can sometimes use executables as SO files (although some different
compilation flags may be required to really do this).



\section developer_symbols_modload What is a Module

A module is very similar to an SO file. However, it is not linked to the binary, and therefore the operating system
does not know anything about the link between them.

So how does it get used? In linux, this is done via `dlopen()` and `dlsym()`. `dlopen()` opens a module, and
`dlsym()` searches for a symbol in the module and returns a pointer to it. Casting the pointer to the right
type (like a function pointer) allows you to use it. This is very, very powerful and the entire basis
behind plugin architectures.

But what happens to the symbol table? It depends on what you want, and this is controlled by
flags passed to `dlopen`.

  * `RTLD_LOCAL` means that the symbols remain local to the module. Except for what you purposely grab
     out via `dlsym()`, it is unusable, particularly by libraries loaded afterwards.
  * `RTLD_GLOBAL` means the symbols are added to the processes symbol table, and libraries opened
     afterwards can use them.

\note Not sure the symbols are actually added to the symbol table, but I think that's right.

What about symbols not defined in the module file, but in other module files?

  * `RTLD_NOW` means to resolve all the symbols in the module right now. If it can't, the program aborts
  * `RTLD_LAZY` means to wait until a symbol is actually used to resolve it.

Modules can be linked to shared libraries as well, and these are resolved when using `dlopen()`. Symbols
from these chained shared-object libraries are available as if they were part of the module.

\note I think


\section developer_symbols_rpath The RPath

The rpath is a hard-coded path that an executable, shared-library or
module can use to find shared libraries (but not modules).  This allows
for programs to use their own directory structure, etc, without having
the user mess around with `LD_LIBRARY_PATH` all the time. The downside
is that the result may not be portable (since the path is hard coded).


\section developer_symbols_python What about Python?

C++ projects that are to be used by python are modules. When python `import`s an SO file, it calls
`dlopen()` and then searches for a function with a specific name (PyInit_modulename) and then runs it.
the `RTLD_` flags can be controlled from python as well. Therefore, everything we've already mentioned
about the symbol table applies to python as well. That is, loading a module with `RTLD_GLOBAL` will allow
other modules imported into python to use functionality from the first module.


\todo Check PyInit name



\section developer_symbols_using Using this to our advantage

So how does this work in practice in BPModule? Well, it starts with `import`ing bpmodule.
This is a traditional python library, with an `__init__.py` file. In that file the core modules
(written in C++) are imported, as mentioned above.

  1. Set `RTLD_GLOBAL` and `RTLD_LAZY`. We want the symbols from the core modules to be available
     to everything else that's loaded afterwards. `RTLD_LAZY` is needed because of circular dependencies
     in between the core modules.

  2. Import the core modules. Because of `RTLD_GLOBAL`, each module can use symbols from the others. And,
     because modules may be linked to shared libraries, they bring along the shared libraries as well.

  3. Reset the `RTLD_` flags to their original state.
    
This simplifies the build process tremendously, since modules don't have to be linked to each other
at build time. In addition, external dependencies (such as taskforce, etc) only have to be linked to
a single module. Then, when that module is loaded, that library comes along with it. Ta-dah!

BPModule "modules" use a simiar idea, although the module loading is handled in C++. The file is opened,
a specific function is found, run, etc. And because the core was loaded with `RTLD_GLOBAL`, all core
functionality (again, including the linked libraries) are available to the module without having to link
to it at build time.


For more info on how BPModule modules are opened and used, see \ref developer_module_basics_page




*/
